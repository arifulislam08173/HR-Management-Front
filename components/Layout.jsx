import React, { useState, useEffect, Fragment } from "react";
import Head from "next/head";
import { useRouter } from "next/router";

//redux imports
import { connect } from "react-redux";

//components import
import Sidebar from "./global/Sidebar";
import Topbar from "./global/Topbar";
import Login from "../pages/login";

const Layout = ({ children, isLoggedIn, isCollapsed }) => {
  //Public routes
  const router = useRouter();
  const currentPath = router.pathname;
  const isPublicPath = currentPath.startsWith("/public");

  //Responsive
  const [width, setWidth] = useState(window.innerWidth);

  // SET WINDOW SIZE
  useEffect(() => {
    function handleResize() {
      setWidth(window.innerWidth);
    }
    window.addEventListener("resize", handleResize);
    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, []);

  return (
        <>
          <Head>
            <title>HR-Management</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
    
          {isPublicPath ? (
            // if you're on a “public” route, render it as before
            <div className="holder-public">{children}</div>
          ) : (
            // otherwise always render the app—no login check
            <div className="app">
              <Sidebar />
              {width < 600 ? (
                // mobile collapsed logic stays the same
                isCollapsed ? (
                  <div className="content">
                    <Topbar />
                    <div className="holder">{children}</div>
                  </div>
                ) : null
              ) : (
                <div className="content">
                  <Topbar />
                  <div className="holder">{children}</div>
                </div>
              )}
            </div>
          )}
        </>
      );
    }

const mapStateToProps = (state) => {
  return {
    isLoggedIn: state.auth.token,
    isCollapsed: state.collapse.isCollapse,
  };
};

export default connect(mapStateToProps)(Layout);
